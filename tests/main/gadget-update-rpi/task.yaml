summary: Exercise a gadget update on Raspberry PI

environment:
    BLOB_DIR: $(pwd)/fake-store-blobdir
    # snap-id of 'pi' gadget snap
    PI_SNAP_ID: YbGa9O3dAXl88YLI6Y1bGG74pwBxZyKg
    START_REVISION: 1000
    TRUST_TEST_KEYS: true

backends: [external]
systems: [ubuntu-core-*]

prepare: |
    if ! test -d /snap/pi; then
        echo "This test needs a host using 'pi' gadget snap"
        exit 0
    fi

    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    snap ack "$TESTSLIB/assertions/testrootorg-store.account-key"

    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh
    setup_fake_store "$BLOB_DIR"

    cp /var/lib/snapd/snaps/pi_*.snap gadget.snap
    unsquashfs -d pi-snap gadget.snap

    # gadget YAMLs should be identical, otherwise the test needs to be updated
    diff -up pi-gadget.yaml pi-snap/meta/gadget.yaml

    # prepare a vanilla version
    sed -i -e 's/^version: \(.*\)/version: \1-1/' pi-snap/meta/snap.yaml
    # pack it
    snap pack pi-snap --filename=pi_x1.snap

    cat <<EOF > decl-headers.json
    {"snap-id": "$PI_SNAP_ID"}
    EOF
    cat <<EOF > rev-headers.json
    {"snap-id": "$PI_SNAP_ID", "snap-revision": "$START_REVISION"}
    EOF

    new_snap_declaration "$BLOB_DIR" pi_x1.snap --snap-decl-json decl-headers.json
    new_snap_revision "$BLOB_DIR" pi_x1.snap --snap-rev-json rev-headers.json

    # prepare first update
    mkdir -p pi-snap/boot-assets/bar

    echo 'this is foo' > pi-snap/boot-assets/foo.data
    echo 'this is bar' > pi-snap/boot-assets/bar/bar.data
    echo 'this is zed' > pi-snap/boot-assets/bar/zed.data

    cp pi-gadget-2.yaml pi-snap/meta/gadget.yaml
    sed -i -e 's/^version: \(.*\)-1/version: \1-2/' pi-snap/meta/snap.yaml
    snap pack pi-snap --filename=pi_x2.snap
    cat <<EOF > rev-headers-2.json
    {"snap-id": "$PI_SNAP_ID", "snap-revision": "$((START_REVISION+1))"}
    EOF

    # prepare second update
    echo 'this is updated foo' > pi-snap/boot-assets/foo.data
    echo 'this is updated bar' > pi-snap/boot-assets/bar/bar.data
    echo 'this is updated zed' > pi-snap/boot-assets/bar/zed.data

    cp pi-gadget-3.yaml pi-snap/meta/gadget.yaml
    sed -i -e 's/^version: \(.*\)-2/version: \1-3/' pi-snap/meta/snap.yaml
    snap pack pi-snap --filename=pi_x3.snap
    cat <<EOF > rev-headers-3.json
    {"snap-id": "$PI_SNAP_ID", "snap-revision": "$((START_REVISION+2))"}
    EOF

    snap install pi_x1.snap

restore: |
    if ! test -d /snap/pi; then
        echo "This test needs a host using 'pi' gadget snap"
        exit 0
    fi

    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh
    teardown_fake_store "$BLOB_DIR"

    # restore the original gadget snap
    snap install gadget.snap

execute: |
    if ! test -d /snap/pi; then
        echo "This test needs a host using 'pi' gadget snap"
        exit 0
    fi

    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh

    # XXX: the test hardcodes a bunch of locations
    # system-boot is mounted at /boot/uboot

    if [[ "$SPREAD_REBOOT" == 0 ]]; then

        new_snap_declaration "$BLOB_DIR" pi_x2.snap --snap-decl-json decl-headers.json
        new_snap_revision "$BLOB_DIR" pi_x2.snap --snap-rev-json rev-headers-2.json

        snap install pi_x2.snap

        REBOOT
    fi

    if [[ "$SPREAD_REBOOT" == 1 ]]; then
        # wait for change to complete
        snap watch --last=install\?

        # verify the update
        test "$(cat /boot/uboot/foo.data)" = 'this is foo'
        test "$(cat /boot/uboot/bar/bar.data)" = 'this is bar'
        test "$(cat /boot/uboot/bar/zed.data)" = 'this is zed'

        # prepare & install the next update
        new_snap_declaration "$BLOB_DIR" pi_x3.snap --snap-decl-json decl-headers.json
        new_snap_revision "$BLOB_DIR" pi_x3.snap --snap-rev-json rev-headers-3.json

        snap install pi_x3.snap

        REBOOT
    fi

    if [[ "$SPREAD_REBOOT" == 2 ]]; then
        # wait for change to complete
        snap watch --last=install\?

        # verify the update

        test "$(cat /boot/uboot/bar/zed.data)" = 'this is updated zed'
        # preserved according to gadget spec
        test "$(cat /boot/uboot/foo.data)" = 'this is foo'
        test "$(cat /boot/uboot/bar/bar.data)" = 'this is bar'

    fi
