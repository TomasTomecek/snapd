# This file is part of snapd-selinux
# Skeleton derived from Fedora selinux-policy, Copyright (C) 2016 Red Hat, Inc.
# Copyright (C) 2016 Neal Gompa
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


policy_module(snappy,0.0.14)

########################################
#
# Declarations
#

attribute_role snappy_roles;

type snappy_t;
type snappy_exec_t;
init_daemon_domain(snappy_t, snappy_exec_t)
role snappy_roles types snappy_t;

type snappy_config_t;
files_config_file(snappy_config_t)

type snappy_home_t;
typealias snappy_home_t alias { user_snappy_home_t staff_snappy_home_t sysadm_snappy_home_t };
typealias snappy_home_t alias { auditadm_snappy_home_t secadm_snappy_home_t };
userdom_user_home_content(snappy_home_t)

type snappy_var_t;
files_type(snappy_var_t)

type snappy_var_lib_t;
files_type(snappy_var_lib_t)

type snappy_var_cache_t;
files_type(snappy_var_cache_t)

type snappy_var_run_t;
files_pid_file(snappy_var_run_t)

type snappy_unit_file_t;
systemd_unit_file(snappy_unit_file_t)

type snappy_tmp_t;
files_tmp_file(snappy_tmp_t)

type snappy_snap_t;
files_type(snappy_snap_t)

########################################
#
# snappy local policy
#

# For development purposes, snappy_t domain is to be marked permissive
permissive snappy_t;

# Allow transitions from init_t to snappy for sockets
gen_require(` type init_t; type var_run_t; ')
filetrans_pattern(init_t, var_run_t, snappy_var_run_t, sock_file, "snapd.socket")
filetrans_pattern(init_t, var_run_t, snappy_var_run_t, sock_file, "snapd-snap.socket")

# Allow init_t to read snappy data
allow init_t snappy_var_lib_t:dir read;

# Allow snapd to read init socket
gen_require(` type init_t; ')
allow snappy_t init_t:file { getattr open read };
allow snappy_t init_t:lnk_file read;
allow snappy_t init_t:unix_stream_socket connectto;

# Allow snapd to read file contexts
gen_require(` type file_context_t; ')
allow snappy_t file_context_t:dir search;
allow snappy_t file_context_t:file { map getattr open read };

# Allow snapd to read procfs
gen_require(` type proc_t; ')
allow snappy_t proc_t:file { getattr open read };

# Allow snapd to read sysfs
dev_read_sysfs(snappy_t)
dev_search_sysfs(snappy_t)

# This silences a read AVC denial event on the lost+found directory.
gen_require(` type lost_found_t; ')
dontaudit snappy_t lost_found_t:dir read;

# Allow snapd to read SSL cert store
miscfiles_read_all_certs(snappy_t)

# Allow snapd to read config files
read_files_pattern(snappy_t, snappy_config_t, snappy_config_t)

# Allow snapd to manage snaps' homedir data
manage_dirs_pattern(snappy_t, snappy_home_t, snappy_home_t)
manage_files_pattern(snappy_t, snappy_home_t, snappy_home_t)
manage_lnk_files_pattern(snappy_t, snappy_home_t, snappy_home_t)
userdom_search_user_home_dirs(snappy_t)
userdom_user_home_dir_filetrans(snappy_t, snappy_home_t, dir, "snap")

# Allow snapd to read DNS config
sysnet_dns_name_resolve(snappy_t)

# When managed by NetworkManager, DNS config is in its rundata
gen_require(` type NetworkManager_var_run_t; ')
allow snappy_t NetworkManager_var_run_t:dir search;

# Allow snapd to read sysctl files
gen_require(` type sysctl_net_t; ')
allow snappy_t sysctl_net_t:dir search;
allow snappy_t sysctl_net_t:file { open read };

# Allow snapd to manage D-Bus config files for snaps
optional_policy(`
  dbus_read_config(snappy_t)
  allow snappy_t dbusd_etc_t:file { write create rename unlink };
  allow snappy_t dbusd_etc_t:lnk_file { read };
')

# Allow snapd to manage udev rules for snaps
optional_policy(`
  udev_manage_rules_files(snappy_t)
	udev_manage_pid_files(snappy_t)
  udev_exec(snappy_t)
  udev_create_kobject_uevent_socket(snappy_t)
')
allow snappy_t self:netlink_kobject_uevent_socket create_socket_perms;

# Allow snapd to read/write systemd units and use systemctl for managing snaps
systemd_config_all_services(snappy_t)
systemd_manage_all_unit_files(snappy_t)
systemd_manage_all_unit_lnk_files(snappy_t)
systemd_exec_systemctl(snappy_t)

# Allow snapd to mount snaps
gen_require(` type mount_exec_t; ')
allow snappy_t mount_exec_t:file { map execute execute_no_trans getattr open read };

# Allow snapd to execute unsquashfs
gen_require(` type bin_t; ')
can_exec(snappy_t, bin_t)

# Allow snappy to exec helpers
can_exec(snappy_t, snappy_exec_t)

# Allow snapd to get FUSE device attributes
storage_getattr_fuse_dev(snappy_t)

# Read l10n files?
miscfiles_read_localization(snappy_t)

# Allow snapd and snap-confine to manage its run files
manage_files_pattern(snappy_t, snappy_var_run_t, snappy_var_run_t)
manage_dirs_pattern(snappy_t, snappy_var_run_t, snappy_var_run_t)
manage_sock_files_pattern(snappy_t, snappy_var_run_t, snappy_var_run_t)
# /run/snapd should automatically end up as snappy_var_run_t
filetrans_pattern(snappy_t, var_run_t, snappy_var_run_t, dir, "snapd")

# Allow snapd to manage mounts
gen_require(` type fs_t; type mount_var_run_t; ')
allow snappy_t fs_t:filesystem { mount unmount };
allow snappy_t mount_var_run_t:dir { add_name remove_name write search };
allow snappy_t mount_var_run_t:file { create getattr setattr open read write rename unlink lock };

gen_require(` type user_tmp_t; ')
allow snappy_t user_tmp_t:dir { read };

gen_require(` type systemd_unit_file_t; ')
allow snappy_t systemd_unit_file_t:dir { rmdir };

storage_getattr_fixed_disk_dev(snappy_t)
dev_getattr_loop_control(snappy_t)

gen_require(` type usr_t; ')
allow snappy_t usr_t:dir { write };

gen_require(` type home_root_t; ')
allow snappy_t home_root_t:dir { read };

# Allow snapd to manage its persistent data
manage_dirs_pattern(snappy_t, snappy_var_cache_t, snappy_var_cache_t)
manage_files_pattern(snappy_t, snappy_var_cache_t, snappy_var_cache_t)
manage_lnk_files_pattern(snappy_t, snappy_var_cache_t, snappy_var_cache_t)
mmap_rw_files_pattern(snappy_t, snappy_var_cache_t, snappy_var_cache_t)
manage_dirs_pattern(snappy_t, snappy_var_lib_t, snappy_var_lib_t)
manage_files_pattern(snappy_t, snappy_var_lib_t, snappy_var_lib_t)
manage_lnk_files_pattern(snappy_t, snappy_var_lib_t, snappy_var_lib_t)
manage_dirs_pattern(snappy_t, snappy_var_t, snappy_var_t)
manage_files_pattern(snappy_t, snappy_var_t, snappy_var_t)
manage_lnk_files_pattern(snappy_t, snappy_var_t, snappy_var_t)

# Grant snapd access to /tmp
files_tmp_filetrans(snappy_t, snappy_tmp_t, { file dir })
manage_dirs_pattern(snappy_t, snappy_tmp_t, snappy_tmp_t)
manage_files_pattern(snappy_t, snappy_tmp_t, snappy_tmp_t)

# Allow snapd to use ssh-keygen
ssh_exec_keygen(snappy_t)

# Allow snapd to access passwd file for lookup
auth_read_passwd(snappy_t);

# Until we can figure out how to apply the label to mounted snaps,
# we need to grant snapd access to "unlabeled files"
files_read_isid_type_files(snappy_t)
files_getattr_isid_type(snappy_t)
files_list_isid_type_dirs(snappy_t)
gen_require(` type unlabeled_t; ')
allow snappy_t unlabeled_t:lnk_file { read };

# Until we can figure out why some things are randomly getting unconfined_t,
# we need to grant access to "unconfined" files
gen_require(` type unconfined_t; ')
allow snappy_t unconfined_t:dir { getattr search open read };
allow snappy_t unconfined_t:file { getattr open read };

logging_send_syslog_msg(snappy_t);

allow snappy_t self:capability { sys_admin sys_chroot dac_override dac_read_search chown kill fowner fsetid mknod net_admin net_bind_service net_raw setfcap };
allow snappy_t self:tun_socket relabelto;
allow snappy_t self:process { getcap signal_perms setrlimit setfscreate };

# Various socket permissions
allow snappy_t self:fifo_file rw_fifo_file_perms;
allow snappy_t self:netlink_route_socket create_netlink_socket_perms;
allow snappy_t self:unix_stream_socket create_stream_socket_perms;
allow snappy_t self:tcp_socket create_stream_socket_perms;
allow snappy_t self:udp_socket create_stream_socket_perms;
allow snappy_t self:unix_dgram_socket create_socket_perms;
allow snappy_t self:capability2 block_suspend;

# snapd needs to check for ipv6 support
gen_require(` type node_t; ')
allow snappy_t node_t:tcp_socket node_bind;

corenet_all_recvfrom_unlabeled(snappy_t)
corenet_all_recvfrom_netlabel(snappy_t)
corenet_tcp_sendrecv_generic_if(snappy_t)
corenet_tcp_sendrecv_generic_node(snappy_t)

corenet_tcp_sendrecv_http_port(snappy_t)
corenet_tcp_connect_http_port(snappy_t)
corenet_tcp_sendrecv_http_cache_port(snappy_t)
corenet_tcp_connect_http_cache_port(snappy_t)

# snapd has its own internal DNS resolver
corenet_tcp_sendrecv_dns_port(snappy_t)
corenet_udp_sendrecv_dns_port(snappy_t)
corenet_tcp_connect_dns_port(snappy_t)
corenet_sendrecv_dns_client_packets(snappy_t)

# allow communication with polkit over dbus
optional_policy(`
  policykit_dbus_chat(snappy_t)
')

# allow communication with system bus
optional_policy(`
  dbus_system_bus_client(snappy_t)
')

# allow reading sssd files
optional_policy(`
  sssd_read_public_files(snappy_t)
  sssd_stream_connect(snappy_t)
')

# for sanity checks
optional_policy(`
  mount_run(snappy_t, snappy_roles)
')
